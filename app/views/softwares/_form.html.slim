- url = (action_name == "new" ? {:action=>"create", :controller=>"softwares"} : {:action=>"update", :controller=>"softwares"})

= form_for ([@category, @software]) do |f|
  - if @software.errors.any?
    #error_explanation
      h2 = "#{pluralize(@software.errors.count, "error")} prohibited this software from being saved:"
      ul
        - @software.errors.full_messages.each do |message|
          li = message

  .field
    = f.label :title, "#{t('Title')}*"
    = f.text_field :title

  .field
    - unless @software.has_wikipedia_page
      = f.label :description, "#{t('Description')}*"
      = f.text_area :description
    - else
      = f.label :description, "#{t('Wikipedia Description')}"
      = f.text_area :description, disabled: true

  .field
    = f.label :notes, "#{t('v.softwares.form.notes')}"
    = f.text_area :notes

  .field
    = image_tag @software.logo.url(:'medium@2x'), class: 'card-logo'
    = f.label :logo, "#{t('Logo')}"
    p.desc Square PNG up to 1024 &times; 1024px in dimensions and 512 KB in size.
    = f.file_field :logo
    - if @software.logo.exists?
      .checkbox
        = f.check_box :delete_logo
        = f.label :delete_logo, 'Destroy Logo'

  .field
    = f.label :url, "#{t('v.softwares.form.url')}*"
    = f.url_field :url
  .field
    = f.label :wikipedia_url, "#{t('v.softwares.form.wikipedia-url')}"
    = f.url_field :wikipedia_url
  .field
    = f.label :source_url, "#{t('v.softwares.form.source-url')}"
    = f.url_field :source_url
  .field
    = f.label :license_url, "#{t('v.softwares.form.license-url')}"
    = f.url_field :license_url
  .field
    = f.label :privacy_url, "#{t('v.softwares.form.privacy-url')}"
    = f.url_field :privacy_url
  .field
    = f.label :tos_url, "#{t('v.softwares.form.tos-url')}"
    = f.url_field :tos_url
    

  .field
    = f.label :protocol, t('Protocol Support')
    ul.checkboxes
      - Protocol.all.order(:title).each do |protocol|
        li.checkbox
          = check_box_tag :protocol_ids, protocol.id, @software.protocols.include?(protocol), :name => 'software[protocol_ids][]', :id => "protocol_check_#{protocol.id}"
          = label_tag "protocol_check_#{protocol.id}", protocol.title

  .field
    = f.label :protocol, t('OS Support')
    ul.checkboxes
      - OperatingSystem.all.order(:title).each do |operating_system|
        li.checkbox
          = check_box_tag :operating_system_ids, operating_system.id, @software.operating_systems.include?(operating_system), :name => 'software[operating_system_ids][]', :id => "operating_system_check_#{operating_system.id}"
          = label_tag "operating_system_check_#{operating_system.id}", operating_system.title

  .field
    = f.label :category, "#{t('v.categories.plural')}*"
    - Platform.all.order(:title).each do |platform|
      label= link_to platform.title, platform
      ul.checkboxes
        - platform.categories.order(:title).each do |category|
          li.checkbox
            - if @category.id == category.id
              = check_box_tag :category_ids, category.id, @software.categories.include?(category), :name => 'software[category_ids][]', :id => "category_check_#{category.id}", checked: true
            - else
              = check_box_tag :category_ids, category.id, @software.categories.include?(category), :name => 'software[category_ids][]', :id => "category_check_#{category.id}"
            = label_tag "category_check_#{category.id}", category.title

  .pipe Actions
  = content_tag :button, type: 'submit', class: 'bar' do
    .label= t 'Save'
    .icon= fa_icon 'save'
