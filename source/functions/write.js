// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  var mkdirp, helpers, ref$, sortBy, unique, selectRandom, slugifyDb, slugifyProject, subcategoriesOf, imagesIn, inThisCategory, inThisSubcategory, inTheseSubcategories, inThisProtocol, nestedCategories, nestedCategoriesWeb, platformTypes, protocolTypes, writeHtml, writeJson, routes, viewPath, writeLocalizedSite, writeSiteIndex, writeAllIndex, writeCategoriesIndex, writeCategoriesShow, writeSubcategoriesShow, writeProtocolsIndex, writeProtocolsShow, writeProjectsIndex, writeProjectsShow, writeAboutIndex, writeAboutMedia;
  mkdirp = require('mkdirp');
  helpers = require('../functions/helpers.ls');
  ref$ = require('prelude-ls'), sortBy = ref$.sortBy, unique = ref$.unique;
  ref$ = require('../functions/sort.ls'), selectRandom = ref$.selectRandom, slugifyDb = ref$.slugifyDb, slugifyProject = ref$.slugifyProject, subcategoriesOf = ref$.subcategoriesOf, imagesIn = ref$.imagesIn, inThisCategory = ref$.inThisCategory, inThisSubcategory = ref$.inThisSubcategory, inTheseSubcategories = ref$.inTheseSubcategories, inThisProtocol = ref$.inThisProtocol, nestedCategories = ref$.nestedCategories, nestedCategoriesWeb = ref$.nestedCategoriesWeb, platformTypes = ref$.platformTypes, protocolTypes = ref$.protocolTypes;
  ref$ = require('../functions/write-files.ls'), writeHtml = ref$.writeHtml, writeJson = ref$.writeJson;
  routes = require('../functions/routes.ls').routes;
  viewPath = require('../functions/view-path.ls').viewPath;
  writeLocalizedSite = function(db){
    mkdirp(db.dir);
    writeSiteIndex(db);
    writeAllIndex(db);
    writeCategoriesIndex(db);
    writeCategoriesShow(db);
    writeSubcategoriesShow(db);
    writeProtocolsIndex(db);
    writeProtocolsShow(db);
    writeProjectsIndex(db);
    writeProjectsShow(db);
    writeAboutIndex(db);
    return writeAboutMedia(db);
  };
  writeSiteIndex = function(db){
    var data, path, view, options, file;
    data = db.platformTypes(db.projects);
    path = 'index';
    view = viewPath(path);
    options = {
      pretty: true,
      iso: db.iso,
      bodyClass: db.iso + " root index",
      h: helpers,
      platformTypes: data,
      path: '',
      routes: routes(),
      t: db.locale
    };
    file = db.dir + path;
    return writeHtml(view, options, file);
  };
  writeAllIndex = function(db){
    var data, path, view, options, file, write;
    data = db.platformTypes(db.projects);
    path = 'all/index';
    view = viewPath(path);
    options = {
      pretty: true,
      iso: db.iso,
      bodyClass: db.iso + " all index",
      h: helpers,
      platformTypes: data,
      path: 'all',
      routes: routes('all', 1),
      t: db.locale
    };
    file = db.dir + path;
    write = function(){
      return writeHtml(view, options, file);
    };
    return mkdirp(db.dir + 'all', function(err){
      if (err) {
        return console.error(err);
      } else {
        return write();
      }
    });
  };
  writeCategoriesIndex = function(db){
    var data, path, view, options, file, write;
    data = db.platformTypes(db.projects);
    path = 'categories/index';
    view = viewPath(path);
    options = {
      pretty: true,
      iso: db.iso,
      bodyClass: db.iso + " categories index",
      h: helpers,
      platformTypes: data,
      path: 'categories',
      routes: routes('categories', 1),
      t: db.locale
    };
    file = db.dir + path;
    write = function(){
      return writeHtml(view, options, file);
    };
    return mkdirp(db.dir + 'categories', function(err){
      if (err) {
        return console.error(err);
      } else {
        return write();
      }
    });
  };
  /*
  write-categories-index = (db) ->
    data = nested-categories db.projects
  
    path = 'categories/index'
    view = view-path path
    options = 
      pretty: true
      iso: db.iso
      body-class: "#{db.iso} categories index"
      h: helpers
      categories: data
      path: 'categories'
      routes: routes 'categories', 1
      t: db.locale
    file = db.dir + path
  
    write = ->
      write-html view, options, file
      #write-json data, file
  
    mkdirp db.dir + 'categories', (err) ->
      if err => console.error err
      else write!
  */
  writeCategoriesShow = function(db){
    var create, i$, ref$, len$, category, results$ = [];
    create = function(category){
      var data, i$, ref$, len$, subcategory, projectsRejected, projectsRejectedWeb, projectsRejectedAll, path, view, options, fullPath, file, write;
      data = category;
      for (i$ = 0, len$ = (ref$ = data.subcategories).length; i$ < len$; ++i$) {
        subcategory = ref$[i$];
        projectsRejected = inThisSubcategory(subcategory.name, inThisCategory(category.name, db.projectsRejected));
        projectsRejectedWeb = inThisSubcategory(subcategory.name, inThisCategory('Web Services', db.projectsRejected));
        projectsRejectedAll = sortBy(fn$, unique(projectsRejected.concat(projectsRejectedWeb)));
        subcategory.projectsRejected = projectsRejectedAll;
      }
      path = "categories/" + category.slug + "/";
      view = viewPath('categories/show');
      options = {
        pretty: true,
        iso: db.iso,
        bodyClass: db.iso + " categories show",
        h: helpers,
        category: category,
        platformTypes: db.platformTypes(db.projects),
        path: path,
        routes: routes('categories', 2),
        t: db.locale
      };
      fullPath = db.dir + path;
      file = fullPath + 'index';
      write = function(){
        return writeHtml(view, options, file);
      };
      return mkdirp(fullPath, function(err){
        if (err) {
          return console.error(err);
        } else {
          return write();
        }
      });
      function fn$(it){
        return it.name.toLowerCase();
      }
    };
    for (i$ = 0, len$ = (ref$ = nestedCategoriesWeb(db.projects)).length; i$ < len$; ++i$) {
      category = ref$[i$];
      results$.push(create(category));
    }
    return results$;
  };
  writeSubcategoriesShow = function(db){
    var create, i$, ref$, len$, category, lresult$, j$, ref1$, len1$, subcategory, results$ = [];
    create = function(subcategory){
      var projectsRejected, projectsRejectedWeb, projectsRejectedAll, data, path, view, options, fullPath, file, write;
      projectsRejected = inThisSubcategory(subcategory.name, inThisCategory(category.name, db.projectsRejected));
      projectsRejectedWeb = inThisSubcategory(subcategory.name, inThisCategory('Web Services', db.projectsRejected));
      projectsRejectedAll = sortBy(function(it){
        return it.name.toLowerCase();
      }, unique(projectsRejected.concat(projectsRejectedWeb)));
      data = {
        category: category,
        subcategory: subcategory,
        projects: subcategory.projects,
        projectsRejected: projectsRejectedAll
      };
      path = "subcategories/" + category.slug + "-" + subcategory.slug + "/";
      view = viewPath('subcategories/show');
      options = {
        pretty: true,
        iso: db.iso,
        bodyClass: db.iso + " subcategories show",
        h: helpers,
        data: data,
        path: path,
        routes: routes('subcategories', 2),
        t: db.locale
      };
      fullPath = db.dir + path;
      file = fullPath + 'index';
      write = function(){
        return writeHtml(view, options, file);
      };
      return mkdirp(fullPath, function(err){
        if (err) {
          return console.error(err);
        } else {
          return write();
        }
      });
    };
    for (i$ = 0, len$ = (ref$ = nestedCategoriesWeb(db.projects)).length; i$ < len$; ++i$) {
      category = ref$[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = (ref1$ = category.subcategories).length; j$ < len1$; ++j$) {
        subcategory = ref1$[j$];
        lresult$.push(create(subcategory));
      }
      results$.push(lresult$);
    }
    return results$;
  };
  writeProtocolsIndex = function(db){
    var data, path, view, options, file, write;
    data = protocolTypes(db.protocols);
    path = 'protocols/index';
    view = viewPath(path);
    options = {
      pretty: true,
      iso: db.iso,
      bodyClass: db.iso + " protocols index",
      h: helpers,
      protocolTypes: data,
      path: 'protocols',
      routes: routes('protocols', 1),
      t: db.locale
    };
    file = db.dir + path;
    write = function(){
      return writeHtml(view, options, file);
    };
    return mkdirp(db.dir + 'protocols', function(err){
      if (err) {
        return console.error(err);
      } else {
        return write();
      }
    });
  };
  writeProtocolsShow = function(db){
    var create, i$, ref$, len$, protocol, results$ = [];
    create = function(protocol){
      var data, path, view, options, fullPath, file, write;
      protocol.projects = inThisProtocol(protocol.name, db.projects);
      data = protocol;
      path = "protocols/" + protocol.slug + "/";
      view = viewPath('protocols/show');
      options = {
        pretty: true,
        iso: db.iso,
        bodyClass: db.iso + " protocols show",
        h: helpers,
        protocol: data,
        protocolTypes: protocolTypes(db.protocols),
        path: path,
        routes: routes('protocols', 2),
        t: db.locale
      };
      fullPath = db.dir + path;
      file = fullPath + 'index';
      write = function(){
        return writeHtml(view, options, file);
      };
      return mkdirp(fullPath, function(err){
        if (err) {
          return console.error(err);
        } else {
          return write();
        }
      });
    };
    for (i$ = 0, len$ = (ref$ = db.protocols).length; i$ < len$; ++i$) {
      protocol = ref$[i$];
      results$.push(create(protocol));
    }
    return results$;
  };
  writeProjectsIndex = function(db){
    var data, path, view, options, file, write;
    data = db.projects;
    path = 'projects/index';
    view = viewPath(path);
    options = {
      pretty: true,
      iso: db.iso,
      bodyClass: db.iso + " projects index",
      h: helpers,
      projects: data,
      path: 'projects',
      routes: routes('projects', 1),
      t: db.locale
    };
    file = db.dir + path;
    write = function(){
      return writeHtml(view, options, file);
    };
    return mkdirp(db.dir + 'projects', function(err){
      if (err) {
        return console.error(err);
      } else {
        return write();
      }
    });
  };
  writeProjectsShow = function(db){
    var create, i$, ref$, len$, project, results$ = [];
    create = function(project){
      var data, path, view, options, fullPath, file, write;
      data = slugifyProject(project);
      path = "projects/" + project.slug + "/";
      view = viewPath('projects/show');
      options = {
        pretty: true,
        iso: db.iso,
        bodyClass: db.iso + " projects show",
        h: helpers,
        project: data,
        routes: routes('projects', 2),
        t: db.locale,
        path: path
      };
      fullPath = db.dir + path;
      file = fullPath + 'index';
      write = function(){
        return writeHtml(view, options, file);
      };
      return mkdirp(fullPath, function(err){
        if (err) {
          return console.error(err);
        } else {
          return write();
        }
      });
    };
    for (i$ = 0, len$ = (ref$ = db.projects).length; i$ < len$; ++i$) {
      project = ref$[i$];
      results$.push(create(project));
    }
    return results$;
  };
  writeAboutIndex = function(db){
    var create;
    create = function(){
      var path, view, options, file, write;
      path = 'about/index';
      view = viewPath(path);
      options = {
        pretty: true,
        iso: db.iso,
        bodyClass: db.iso + " about index",
        h: helpers,
        path: 'about',
        routes: routes('about', 1),
        t: db.locale
      };
      file = db.dir + path;
      write = function(){
        return writeHtml(view, options, file);
      };
      return mkdirp(db.dir + 'about', function(err){
        if (err) {
          return console.error(err);
        } else {
          return write();
        }
      });
    };
    return create();
  };
  writeAboutMedia = function(db){
    var create;
    create = function(){
      var path, view, options, fullPath, file, write;
      path = 'about/media/';
      view = viewPath('about/media');
      options = {
        pretty: true,
        iso: db.iso,
        bodyClass: db.iso + " about media",
        h: helpers,
        path: path,
        routes: routes('about', 2),
        t: db.locale
      };
      fullPath = db.dir + path;
      file = fullPath + 'index';
      write = function(){
        return writeHtml(view, options, file);
      };
      return mkdirp(fullPath, function(err){
        if (err) {
          return console.error(err);
        } else {
          return write();
        }
      });
    };
    return create();
  };
  exports.writeLocalizedSite = writeLocalizedSite;
}).call(this);
